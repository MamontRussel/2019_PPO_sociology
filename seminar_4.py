# -*- coding: utf-8 -*-
"""Seminar_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W-QGktjmNEKOybpjvlgKz7KI4fWCv8Ph

# Визуализация данных

В самом начале лирическое отступление. Вы, наверное, уже видели, в каких красивых блокнотах мы отдаем вам файлы.
Хорошая новость - делать их несложно. Плохая новость - вам придется в таком же виде сдать нам задание #4. Поэтому крошечный тьюториал. 

Чтобы поменять тип ячейки на markdown (размеченный текст) - нужно выбрать markdown для конкретной ячейке в выпадающей строке наверху файла (по умолчанию там стоит code). И все - теперь мы можем писать здесь текст, а при исполнении ячейки он станет как будто частью файла (если кликнуть на такую ячейку два раза - то ее опять можно будет редактировать).

Markdown поддерживает разметку файла - а значит, вы можете использовать теги, менять параметры текста, вставлять картинки.
Мы ограничимся базовыми параметрами текста (сделайте эту ячейку редактируемой, чтобы увидеть невидимые символы).

# Вот так делаем заголовок 1 уровня
## А так второго
### А так третьего
#### Ну, вы поняли

**Жирный текст**
* курсив *

Список:

* раз
* два 
* три

На этом достаточно :)
"""



"""## Вернемся к визуализации
Во-первых, кроме привычных вам графиков существует еще огромное множество всего (и некоторые вещи работают гораздо лучше привычных нам). Python умеет строить и сложные штуки.
Есть несколько классных сайтов, которые помогают выбрать подходящий график для ваших данных:

https://www.data-to-viz.com/

https://datavizproject.com/

https://datavizcatalogue.com/RU/

Сегодня будем делать упражнения по мотивам вот этого блокнота

https://nbviewer.jupyter.org/github/yaph/ipython-notebooks/blob/master/movie-body-counts.ipynb

и работать с датасетом, который подсчитывает количество смертей в фильмах (меотодологию сбора данных можно посмотреть по ссылке выше).
"""



import os
os.chdir("C:/Users/Rogov/Desktop/Data")
os.getcwd ()

fig, ax= plt.subplots(1, 1)

fig, ax = plt.subplots(2, 2, figsize=(12,6))

data = pd.read_csv(r'populations.txt', sep='\t')

data.head()

data.year = data.year.apply(int)

fig, ax= plt.subplots(1, 1)
ax.plot(data.year, data.hare)
ax.locator_params(integer=True)

fig, ax1= plt.subplots(2, 2, figsize=(12,8))

ax1[0][0]

fig, ax1= plt.subplots(2, 2, figsize=(12,8))

for x in range(2):
    for y in range(2):
        ax1[x][y].set_xlabel('Time', fontsize = 16)

fig, ax1= plt.subplots(2, 2, figsize=(12,8))

for x in range(2):
    for y in range(2):
        ax1[x][y].set_xlabel('Time', fontsize=14)
        ax1[x][y].locator_params(integer=True)
        ax1[x][y].spines['right'].set_visible(False)
        ax1[x][y].spines['top'].set_visible(False)
        ax1[x][y].xaxis.set_tick_params(width=0.2)
        ax1[x][y].yaxis.set_tick_params(width=0.2)
        for axis in ['top','bottom','left','right']:
            ax1[x][y].spines[axis].set_linewidth(0.2)

        
ax1[0][0].plot(data.year, data.hare, color='#8c92ac', ls = ':')
ax1[0][0].set_ylabel('Hare', fontsize=14)

ax1[1][1].plot(data.year, data.hare, label = 'Hares', color='#8c92ac', ls = ':'); # here the color is specified with three numbers
ax1[1][1].plot(data.year, data.lynx, label = 'Carrots', color='#ffa500', ls = '--'); # here the color is specified with three numbers
ax1[1][1].plot(data.year, data.carrot, label = 'Lynxes', color='#b06500', ls = '-'); # here the color is specified with three numbers
ax1[1][1].legend(loc=1, fontsize=8, frameon=False) # upper left corner

fig.savefig("my_new_plot.png")



os.getcwd()

df = pd.read_csv('crimeRatesByState2005.tsv',header=0,sep='\t')

df.head()

fig, ax= plt.subplots(1, 1)
sc=plt.scatter(df['murder'], df['burglary'])

fig, ax= plt.subplots(1, 1)
sc=plt.scatter(df['murder'], df['burglary'], s=df['population']/100000)

fig, ax= plt.subplots(1, 1)
sc=plt.scatter(df['murder'], df['burglary'], s=df['population']/100000, c=df['motor_vehicle_theft'], alpha=0.5,cmap=plt.cm.get_cmap('viridis') )
plt.colorbar(sc)

fig, ax = plt.subplots(1, 1, figsize=(10,5))
plt.scatter(df['murder'], df['burglary'], s=df['population']/100000, c=df['motor_vehicle_theft'], alpha=0.5, cmap=plt.cm.get_cmap('viridis'))
state_names = df['state']
state_data = df[df.columns[1:]]

for i in range(len(state_names)):
    ax.annotate(state_names[i], (state_data.loc[i,"murder"]+0.2, state_data.loc[i,'burglary']+10))
plt.colorbar()

fig, ax = plt.subplots()

ax.scatter(df['murder'], df['burglary'], s = np.array(df['population']) / 30000, c = df['Robbery'], cmap = 'inferno', alpha = 0.5, linewidth = 0)

ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)

ax.yaxis.set_ticks_position('left')
ax.xaxis.set_ticks_position('bottom')

ax.spines['left'].set_linewidth(0.5)
ax.spines['bottom'].set_linewidth(0.5)

ax.set_xlabel('Murder', fontsize = 10)
ax.set_ylabel('Bulglarly', fontsize = 10)

for i, state in enumerate(df['state']):
    ax.annotate(state, (df['murder'][i],df['burglary'][i]), fontsize = 5)

url = 'https://python-graph-gallery.com/wp-content/uploads/gapminderData.csv'
data = pd.read_csv(url)

data.head()

my_dpi=96

data['continent']=pd.Categorical(data['continent'])
data.head()

tmp = data[data.year == 1962 ]
plt.scatter(tmp['gdpPercap'], tmp['lifeExp'], s=tmp['pop']/200000 , c=tmp['continent'].cat.codes, cmap="Accent", alpha=0.6, edgecolors="white", linewidth=2)
plt.xscale('log')
plt.xlabel("GDP per Capita")
plt.ylabel("Life Expectancy")
plt.title("Year: "+str(1962) )
plt.ylim(30, 90)
plt.xlim(0,100000)

# For each year:
for i in data.year.unique():
 
    # initialize a figure
    fig = plt.figure(figsize=(680/my_dpi, 480/my_dpi), dpi=my_dpi)

    # Change color with c and alpha. I map the color to the X axis value.
    tmp = data[data.year == i ]
    plt.scatter(tmp['gdpPercap'], tmp['lifeExp'], s=tmp['pop']/200000 , c=tmp['continent'].cat.codes, cmap="Accent", alpha=0.6, edgecolors="white", linewidth=2)
    
    plt.xscale('log')
    plt.xlabel("GDP per Capita")
    plt.ylabel("Life Expectancy")
    plt.title("Year: "+str(i) )
    plt.ylim(30, 90)
    plt.xlim(0,100000)
    
    # Save it
    filename='Gapminder_step'+str(i)+'.png'
    plt.savefig(filename, dpi=96)
    plt.gca()



# импортируем библиотеки
# %matplotlib inline

import numpy as np  # библиотека для работы с числами, пригодится для преобразований
import pandas as pd
import matplotlib.pyplot as plt  # библиотека для визуализации
import seaborn as sns            # библиотека для визуализации



df = pd.read_csv('filmdeathcounts.csv')

df.head()

"""Давайте добавим две новых переменных: счетчик фильмов (понадобится позже при группировках, для всех фильмов равен 1). И переменная, измеряющая количество трупов в минуту экранного времени :)"""

df['Film_Count'] = 1
df['Body_Count_Min'] = df['Body_Count'] / df['Length_Minutes'].astype(float)
df.head()

"""В прошлые разы мы с вами смотрели, как группировать таблицы по паре параметров и считать описательные статистики. В pandas мы можем создавать агрегированные таблицы (суммирующие, пивотальные - вы можете знать их под этими именами).
Давайте сгруппируем фильмы по году и для каждой колонки посчитаем сумму, среднее и медиану.
"""

group_year = df.groupby('Year').agg([np.mean, np.median, sum])
group_year.tail()

df_bc = pd.DataFrame({'mean_value': group_year['Body_Count']['mean'],
                      'median_value': group_year['Body_Count']['median']})

df_bc_min = pd.DataFrame({'mean_value': group_year['Body_Count_Min']['mean'], 
                          'median_value': group_year['Body_Count_Min']['median']})

df_bc.head()

df_bc_min.head()

plt.style.available

# plt.style.use('seaborn-dark-palette')

sns.set_style("whitegrid")

fig, axes = plt.subplots(nrows=4, ncols=1, figsize=(16, 30))

group_year['Film_Count']['sum'].plot(kind='bar', ax=axes[0], color = '#ffa500')
axes[0].set_title('Film Count')

group_year['Body_Count']['sum'].plot(kind='bar', ax=axes[1], color = '#ffa500')
axes[1].set_title('Total Body Count')

df_bc.plot(kind='bar', ax=axes[2])
axes[2].set_title('Body Count by Film')

df_bc_min.plot(kind='bar', ax=axes[3])
axes[3].set_title('Body Count by Minute')

for i in range(4):
    axes[i].set_xlabel('', visible=False)
    axes[i].grid(b = False)

df.head()

df_film = df.set_index('Film')
df_film.head()

df_film.sort_values(by=['Body_Count'])['Body_Count'].tail(10)

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 8))

bc = df_film.sort_values(by=['Body_Count'])['Body_Count'].tail(10)
bc.plot(kind='barh', ax=axes[0])
axes[0].set_title('Total Body Count')

bc_min = df_film.sort_values(by=['Body_Count_Min'])['Body_Count_Min'].tail(10)
bc_min.plot(kind='barh', ax=axes[1])
axes[1].set_title('Body Count per Minute')
axes[1].yaxis.set_ticks_position('right')

for i in range(2):
    axes[i].set_ylabel('', visible=False)
    axes[i].grid('False')

"""# Most violent directors"""

df[df['Director'].apply(lambda x: -1 != x.find('|'))].head()

def expand_col(df_src, col, sep='|'):
    di = {}
    idx = 0
    for i in df_src.iterrows():
        d = i[1]
        names = d[col].split(sep)
        for name in names:
            # operate on a copy to not overwrite previous director names
            c = d.copy()
            c[col] = name
            di[idx] = c
            idx += 1

    df_new = pd.DataFrame(di).transpose()
    # these two columns are not recognized as numeric
    df_new['Body_Count'] = df_new['Body_Count'].astype(float)
    df_new['Body_Count_Min'] = df_new['Body_Count_Min'].astype(float)
    
    return df_new

bc_sum = df_dir.groupby('Director').sum().sort_values(by=['Body_Count']).tail(10)
bc_sum

bc_mean = df_dir.groupby('Director').agg(np.mean).sort_values(by=['Body_Count_Min']).tail(10)
bc_mean

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(14, 8))

bc_sum['Body_Count'].plot(kind='barh', ax=axes[0])
axes[0].set_title('Total Body Count')

bc_mean['Body_Count_Min'].plot(kind='barh', ax=axes[1])
axes[1].set_title('Body Count per Minute')
axes[1].yaxis.set_ticks_position('right')

for i in range(2):
    axes[i].set_ylabel('', visible=False)





"""# by genre"""

df_dir['Genre'].value_counts().plot(kind='bar', figsize=(12, 6), title='Genres by film count')

bc_mean = df_dir.groupby('Genre').agg(np.mean).sort_values(by=['Body_Count_Min'], ascending=False)

ax = bc_mean['Body_Count_Min'].plot(kind='bar', figsize=(12, 6), title='Genres by body count per minute')
ax.set_xlabel('', visible=False)

"""# Rankings"""

df['MPAA_Rating'].value_counts()

df['Body_Count_Min'].max()

fig, ax = plt.subplots(figsize=(14, 10))
ax.scatter(df['MPAA_Rating'], df['Body_Count_Min'], s=df['Body_Count'], alpha=.5)
ax.set_title('Body counts and MPAA ratings')
ax.set_xlabel('MPAA Rating')
ax.set_xticks(rating_index)
ax.set_xticklabels(rating_names)
ax.set_ylabel('Body count per minute')

bc_top.reset_index()





bc_top = df.sort_values('Body_Count', ascending=False)[:3].reset_index()
annotations = []
for r in range(len(bc_top)):
    annotations.append([bc_top['Film'][r], bc_top['IMDB_Rating'][r], bc_top['Body_Count_Min'][r]])
annotations

fig, ax = plt.subplots(figsize=(14, 10))
ax.scatter(df['IMDB_Rating'], df['Body_Count_Min'], s=df['Body_Count'], alpha=.5)
ax.set_title('Body count and IMDB ratings')
ax.set_xlabel('IMDB Rating')
ax.set_ylabel('Body count per minute')

for annotation, x, y in annotations:
    plt.annotate(
        annotation,
        xy=(x, y),
        xytext=(0, 30),
        textcoords='offset points',
        ha='center',
        va='bottom',
        size=12.5,
        bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.5),
        arrowprops=dict(arrowstyle='-'))























