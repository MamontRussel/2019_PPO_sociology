'''
Социология | 1 курс | ППО Data Culture | Семинар 3

На прошлом занятии мы узнали про условные операторы (if, else, elif) и цикл while.
Сегодня мы познакомимся с вещественными числами, строками и операциями над ними.
'''

'''
Вещественные числа в питоне обозначаются словом float. Вещественные числа записываются через точку. Также могут быть представлены в виде математической записи: 1/10000 = 1e-05
'''
import math 

x = float(0.00001)
print(x)


'''
В памяти компьютера вещественные числа представляются в виде степеней двойки. К сожалению, не все числа точно представимы в виде степеней двойки. Как следствие, получаем не совсем точное представление числа. Рассмотрим на примере.
'''

print(0.125 == 0 * 1/2 + 0 * 1/4 + 1 * 1/8)
print(0.125 == 0 * 1/10 + 0 * 1/100 + 5 * 1/100)


'''
round - округляет до указанного числа знаков, математическое округление
math.ceil - округление до ближайшего целого числа, большего данного (постоянное окруление вверх). Возвращает float
math.floor - округление до ближайшего целого числа, меньше данного . Возвращает float
math.trunc - усечение числа до целого (постоянное округление вниз). Возвращает int
'''

print(round(1.555, 1))
print(math.ceil(1.54))
print(math.floor(1.54))
print(math.trunc(1.54))



'''Строки (strings) в питоне предназначаются для хранения и отображения текстовой информации. Строки представляют собой последовательность символов, которые имеют свой порядок,  что значит, что питон отслеживает положение каждого элемента строки. Это позволит нам, например, удобно индексировать строки. Для создания строки нужно использовать одинарные или двойные кавычки. Попробуем создать строку.
'''

s = 'Welcome to Brasil!' # одинарные кавычки
print(s)

s = "Welcome to Brasil!" # Двойные кавычки
print(s)

'''Если мы хотим в строке использовать кавычки, например, для какого-то названия, то следует использовать разные кавычки для текста внутри строки и для самой страны. '''

s = 'Welcome to "Brasil!"' # Правильно так
print(s)

#Также можно посчитать длину строки с помощью функции len
print(len(s))

# И превращать число в строку с помощью str
print(str(2))
print(str(x))

'''
Строка представляет собой последовательность, а это значит, что мы можем обратиться к любому ее элементу по индексу.
Для выполнения такой операции в питоне используются квадратные скобки [] после объекта. 
В квадратных скобках указывается желаемый индекс. Индексирование начинается с 0.
'''
s = 'Welcome to Brasil!'

print(s[0]) # первый элемент
print(s[1]) # второй
print(s[2]) # третий

#Предыдущие действия никак не изменили строку
print(s)

'''Кроме выбора одного элемента с помощью индексирования можно получить подстроку. Для этого надо указать индексы границ подстроки через двоеточие.
'''
print(s[1:])
print(s[:4]) # четыре первых символа до порядкового номера 4
print(s[:]) # копия строки
print(s[:-1]) # вся строка кроме последнего символа
print(s[::2]) # также можно выбирать символы из строки с каким-то шагом
print(s[::-1]) # например, с помощью шага -1 можно получить строку наоборот

# Попробуем заменить первую букву
#s[0] = 'w' - не сработает

# зато мы можем объединять строки
print(s + ' Have a nice day!') # или можем напрямую добавить вторую строку к первой
print(s)
s += ' Have a nice day!' # но тогда исходная строка s уже изменится, так как использовали операцию присваивания
print(s)

#Также можно умножать строку на число k и получать новую строку, состоящую из k повторений исходной
k = 3
print(s*k)

'''
Строки в питоне имеют встроенные методы. Их использование выглядит следующим образом: string.method(parameters). 
Где string - это переменная, в которой хрпанится строка; method - название втроенного метода; 
parameters - параметры данного метода.
'''

print(s)
print(s.startswith('W')) # данный метод проверяет, оканчивается ли исходная строка на данную подстроку

'''
Пусть у нас есть отзыв посетителя о кафе. Мы заранее знаем, что пользователь для отзыва выбирает только последнее слово из предложенных двух: 'good', 'bad'. Попробуем оценить, остался ли доволен клиент.
'''
feedback = 'This place was bad.' # сам отзыв

if feedback.endswith('bad.'): # если строка заканчивается на 'bad'
    print('Client was dissapointed') # то клиент расстроен
else:
    print('Client was satisfied') # иначе - клиенту все понравилось
    
'''
Теперь усложним задачу. Что если слово находится не в конце предложения? Попробуем его найти!
'''
    
feedback2 = 'This place was bad enough'
print(feedback2)
print(feedback2.find('bad')) # данное выражение ищет первый индекс в строке, с которого начинается искомая подстрока
print(feedback2.find('awful')) # если такой подстроки нет, то метод возвращает -1

'''
Теперь мы знаем, что в отзыве сначала идет название кафе, двоеточие, а затем отзыв. Мы хотим получить название кафе.
'''

feedback4 = 'KFC: This place was good: just finished my meal'
print(feedback4)
idx = feedback4.find(':') # находим двоеточие в строке
print(idx)
print(feedback4[idx+1:]) # печатаем сам отзыв, в индексе ставим +1 так как нашли нашли позицию двоеточия

'''
Представим, что у нас есть строка с названием сайта. Мы хотим извлечь из него сам адрес без www и ru
'''

web = 'www.edu.hse.ru'
print(web)
print(web.lstrip('www.')) # данный метод убирает из левой части исходной строки все вхождения подстроки

print(web.rstrip('.ru')) # аналогичный метод только для правой части

'''
Теперь представим, что наш сайт переехал в Казахстан и мы хотим поменять ru на kz. Можно найти индекс подстроки 'ru', выбрать подстроку с начала исходной и до 'ru', а затем прибавить 'kz'.
'''
idx = web.find('ru') # находим
print(web[:idx] + 'kz') # прибавляем

'''
Но что если в адресе сайта тоже будет посдстрока 'ru', например 'www.rumandwine.ru', но мы не хотели бы ее менять? Априори мы знаем, что национальный домен сайта находится в конце, т.е. справа.
'''
web = 'www.rumandwine.ru'
print(web)
idx = web.find('ru') # найдет индекс первого вхождения
print(idx)

idx = web.rfind('ru') # найдет последнее вхождение
print(idx)
print(web[:idx] + 'kz') # теперь можно и заменить на kz


'''
А если в адресе сайта тоже будет посдстрока 'ru' и мы хотим заменить и ее?
'''
web = 'www.rusport.ru'
web.replace('ru', 'kz')

'''
Теперь научимся считать количество вхождений подстроки в строку.
'''

s = "Mushroooom soup" # исходная строка
print(s.count("O")) # ищем заглавную букву О, не находим
print(s.count("o")) # ищем строчную букву о, находим 5 штук
print(s.count("oo")) # ищем две буквы о подряд, находим две таких подстроки
print(s.count("ooo")) # ищем три букв о подряд, находим одно такое вхождение
print(s.count("push")) # ищем подстроку 'push', не находим
print(s.count("o", 4, 7)) # ищем букву о в s[4:7]
print(s.count("o", 7)) # ищем букву о в s[7:]

'''
Также существуют такие общепринятые символы, как перенос строки (\n) и табуляция (\t)
'''
print('one' + '\n' + 'two') # перенос строки
print('one' + '\t' + 'two') # табуляция

'''
Рассмотрим следующую задачу: у нас есть строка, в которой собраны данные ответа на вопрос о качестве оказанной услуги. Каждый ответ отделен точкой с запятой от следующего. Требуется напечатать каждый ответ на новой строке.
'''

s = 'Хорошо;Удовлетворительно;Можно было и лучше;И так сойдет;Восхитительно!'

while len(s) > 0:
    idx = s.find(';')
    if idx == -1:
        print(s)
        s = ''
    else:
        print(s[:idx])
        s = s[idx+1:]
    
'''
А теперь эту же задачу переписать с помощью break.
'''

s = 'Хорошо;Удовлетворительно;Можно было и лучше;И так сойдет;Восхитительно!'
while len(s) > 0:
    idx = s.find(';')
    if idx == -1:
        print(s)
        break
    print(s[:idx])
    s = s[idx+1:]



