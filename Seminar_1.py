'''
Социология | 1 курс | ППО Data Culture | Семинар 1

На первом занятии мы разбираем то, что вы прошли (или пройдете) на платформе Coursera в 1 и 2 неделю.
На втором семинаре будет самостоятельная по материалу, разобранному в этом скрипте.

Многие вещи в Python будут работать при разном написании (например, неважно ставите ли вы пробел
перед знаком равно или нет). Но существует так называемый гид по стилю PEP8 (стилистически гид по Python).
Подробнее можно почитать здесь:
https://www.python.org/dev/peps/pep-0008/
В PyCharm встроен этот стиль, и точно так же, как Word подчеркивает вам неправильные синтаксические конструкции,
тут будут подчеркиваться "плохие практики" написания кода. При наведении курсора на ошибку, вы увидите, что же
не так. Учиться писать правильный, понятный и красивый код - отличная практика.
'''

# Обратите внимание: так выглядит комментарий - часть скрипта, которая не будет исполнена при запуске программы.
# Каждую строку комментария мы начинаем со знака хэштега.

'''
Это тоже комментарий - обычно выделение тремя апострофами мы используем для тех случаев, когда хотим написать длинный,
развернутый текст.
'''

'''
Давайте начнем наше знакомство с языком Python с самой элементарной функции print. 
Функциями в программировании мы называем заранее написанный фрагмент кода, выполняющий какое либо действие,
к которому мы можем обратиться в любой момент. В Python есть встроенные функции. 
Позже мы с вами научимся создавать свои собственные функции.
Но даже встреонных функций в Python очень много. Необязательно помнить их все (хотя, при 
большом количестве практики все самые главные вы будете помнить наизусть). Чтобы узнать, что
делает та или иная функция, можно посмотреть справочную информацию.
'''

help(print)  # вызываем справку с помощью функции help()

'''
Функция print() выводит в консоль аргумент, который мы ей передадим (то, что мы напишем в скобках). 
'''

print('Hello, world!')
print(1)

'''
Поздравляем, вы теперь программисты!
Обратите внимание, что "Hello, world!" мы написали в кавычках, а единицу - нет. Это связанно с тем,
что в программировании мы имеем дело с разными типами данных. И Python будет воспринимать текст как текст,
только в том случае, если мы его возьмем в кавычки (неважно, одинарные или двойные). А при выводе эти кавычки
отображаться уже не будут (они служат знаком для Python, что внутри них - текст).
'''

'''
Следующая вещь, которую нужно знать про язык программирования - как в нем задаются переменные. Переменные - это 
контейнеры, которые хранят в себе информацию (текстовую, числовую, какие-то более сложные виды данных). В Python
знаком присвоения является знак =. 
'''

x = 'Hello, world!'
print(x)  # Обратите внимание, что результат вызова этой функции такой же, как выше.

'''
Python -  язык чувствительный к регистру. Поэтому, когда создаете/вызываете переменные или функции, обязательно
используйте правильный регистр. Так, следующая строка выдаст ошибку.
'''

print(X)

'''
Ошибка выглядит следующим образом (если вы запустили код, то увидете ее в консоли)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'X' is not defined

Очень важно уметь читать текст ошибки. В нашем случае все просто - в 1 строке кода была вызвана переменная,
которая не была определена (X). Знание английского и умение читаться traceback (отчет об ошибке) помогут вам
быстро находить и исправлять поломки.
'''

'''
ТИПЫ ДАННЫХ
Сегодня мы познакомимся только с частью типов данных, с которыми умеет работать Python. 
Если вы вдруг знакомы с другими языками программирования, то стоит отметить, что типизация в Python - динамическая.
Это значит, что вам не нужно говорить какой тип данных вы хотите положить в переменную - Python сам все определит.
Проверить тип данных можно с помощью функции type(), передав ей в качестве аргумента сами данные или переменную.

ЦЕЛЫЕ ЧИСЛА (INT, INTEGER): 1, 2, 592, 1030523235 - любое целое число без дробной части. 
'''
y = 2
print(type(2))
print(type(y))

'''
Обратите внимание - выше мы вызвали функцию внутри функции. 
type(2) возвращает скрытое значение типа переменной (int для integer). 
Чтобы вывести это скрытое значение в консоль - мы должны его "напечатать".
'''

type(2)  # ничего не происходит
print(type(2))

'''
Самое элементарное, что можно делать в Python - использовать его как калькулятор. Давайте посмотрим, как
он вычитает, слогает и умножает.
'''
print(2 + 2)
print(18 - 9)
print(4 * 3)

''' 
С делением нужно быть немного осторожней. Существует два типа деления - привычное нам, которое даст в ответе
дробь при делении 5 на 2, и деление с остатком, в результате которого мы получим только целую часть частного.
'''

print(5 / 2)  # в результате такого деления получается другой тип данных (float), подробнее о нем поговорим позже.
print(5 // 2)

'''
А если нам надо как раз найти остаток от деления, то мы можем воспользоваться знаком модуло %.
'''

print(5 % 2)

'''
Еще одна математическая операция, которую мы можем выполнять без загрузки специальных математических библиотек - это
возведение в степень.
'''

print(5**2)

'''
Стоит заметить, что все эти истории работают и когда мы присваиваем числа переменным.
'''
a = 2
b = 3
print(a ** b)
# изменится ли результат, если мы перезапишем переменную a?
a = 5
print(a ** b)

'''
ТЕКСТ (СТРОКИ) (STR, STRING): любой текст внутри одинарных или двойных кавычек. 
Важно: если целое число мы возьмем в кавычки, то оно станет строкой. Ниже посмотрим, почему это проблематично.
'''

x = 'text'
print(type(x))
print(type('Hello, world!'))
print(type('2'))

'''
Если попробовать сложить число-строку и число-число, то получим ошибку.
'''

print('2' + 3)

'''
А что будет, если мы сложим два числа строки?
'''
print('2' + '3')

'''
Такая операция называется контакенация (слиянием) строк. 
А что произойдет если умножить строку на число?
'''

print('2' * 3)

'''
Такая операция повторит нам строку заданное количество раз.
Так же функция print может принимать на ввод разные типы данных, разделенные запятой. Обратите внимание,
что они выводятся через пробел.
'''

print('2 + 3 =', 2 + 3)
z = 5
print('2 + 3 =', z)

'''
У функции print есть параметры. Параметры - это такие свойства функций, которые задают значение невидимых нам
аргументов внутри функции.
Так существует параметр sep (separator), благодаря которому мы можем менять тип разделителя между аргументами print.
В качестве разделителя может выступать любая строка.
Сравните:
'''

print('1', '2', '3')
print('1', '2', '3', sep='.')
print('1', '2', '3', sep='')

'''
Параметр end задает то, что будет выведено в конце исполнения функции print. По умолчанию там стоит 
невидимый символ '\n', который осуществляет переход на новую строку. Мы можем заменить его на любую строку. 
Если мы хотим сохранить переход на новую строку - то обязательно прописываем наш невидимый символ внутри
выражения.
'''
print('1', '2', '3', sep='.', end='!')
print('2')  # строки слились

print('1', '2', '3', sep='.', end='!\n')
print('2')  # вывод на новой строке

'''
Следующий базовый вид данных в Python - логические переменные. Это переменные, которые примнимают значения
истина (True) или ложь (False). Эти переменные нам нужны, чтобы оценивать истинность тех или иных выражений
(например, входит ли число в какой-то интервал, принадлежит ли элемент набору данных, содрежит ли текст 
определенно слово или выражение и т.д.).

Тип такой переменной - bool (Boolean, булевая или логическая). 

Чтобы оценивать истинность или ложность выражений, мы используем знаки равенства и сравения
== равно
!= неравно
> больше
< меньше
>= больше или равно
<= меньше или равно

'''
print(1 == 1)
print(1 == '1')
c = 1 > 3
print(c)
print(type(c))

'''
Если вы знакомы с основами логики, то вы знаете, что мы можем комбинировать логические выражение с помощью
связок "и" и "или", а с помощью частицы "не" отрицать выражение. 
Нам пока достаточно знать, что выражение со связкой "и" (and) будет истинным тогда и только тогда, когда обе
его части истинны. Со связкой "или" ("or") - когда хотя бы одно из выражений истинно. "Не" (not) меняет True на
False и наоборот.

С помощью скобок мы можем писать сложные многоступенчатые выражения.
'''

print((1 == 1) and ('1' == 1))
print((1 == 1) or ('1' == 1))
print(not(1 == 1))
print(((1 == 1) or ('1' == 1)) and (2 == 2))

'''
В Python есть и другие типы данных, с которыми вы познакомитесь позже. Но уже с этими мы можем делать интересные 
вещи. Наверное, когда мы думаем о программировании, мы предполагаем некоторую оптимизацию процессов, 
какие-то вещи, которые можно автоматизировать. С этим нам поможет условный цикл. Это такая конструкция, 
которая выполняет некоторое действия исходя из истинности или ложности условия. В Python есть два типа
условных циклов - if и while. Пока разберемся с "если" (if). 

УСЛОВИЯ (IF) позволяют выполнять код только в случае истинности какого-то логического выражения.
Проще говоря, "если верно, что..., то сделать ...".

Самый простой пример использования if - это вывод какой-то фразы по условию.
'''

x = 1
if x == 1:  # Это условие истинное.
    print('That is true!')  # Фраза выводится.
                            # Обратите внимание, весь код внутри условия if отделяется 4 пробелами (так мы понимаем,
                            # что это код внутри конструкции if.

if x != 1:  # Это условие ложное.
    print('That is true!')  # Фраза не выводится

'''
А что делать, если мы хотим делать какое-то действие в том случае, если условие не истинное? Для этого у нас
есть ключевое слово else ("то"). 
'''

if x != 1:
    print('That is true!')
else:
    print('That is false!')

'''
Для следующего примера познакомимся с функцией input() - ввод. Это функция позволяет нам просить
пользователя что-нибудь ввести или принять на ввод какие-то данные.
'''

x = input('Print something:')
print(x)


'''
Обратите внимание, что функция  input() все сохраняет в строковом формате данных. Но мы можем сделать из
числа-строки число-число с помощью функции int(). Введите "1" в обоих случаях и сравните результат.
'''

print(1 == input())
print(1 == int(input()))

'''
Давайте напишем небольшой код, который будет считать скидку на продукт. Если цена продукта дешевле
1000, то скидка будет 25 процентов, если больше, то скидка будет 15 процентов.
'''

amount = int(input("Enter amount: "))  # вводим число

if amount < 1000:  # проверяем условие (введеное число меньше 1000)
    discount = amount*0.25
    print("Discount 25 per cent", discount)
else:  # если условие не выполнено
    discount = amount*0.15
    print("Discount 15 per cent", discount)


'''
А что делать, если мы хотим проверять два условия и что-то делать только потом? Для этого у нас есть конструкция 
else if (или elif) - где мы можем передать новое условие, и только потом перейти к else. Конструкций elif внутри
if может быть сколько угодно. Например, мы хотим делать скидку 20% на все дороже 1000, но дешевле 5000.
'''

amount = int(input("Enter amount: "))  # вводим число

if amount < 1000:  # проверяем условие (введеное число меньше 1000)
    discount = amount*0.25
    print("Discount 25 per cent", discount)
elif amount < 5000:  # если первое условие не выполнено, то проверяем второе условие
    discount = amount*0.20  # и выполняет данный код при его удовлетворении
    print("Discount 20 per cent", discount)
else:  # если же оба условия не выполнены, то выполняем эту часть кода
    discount = amount*0.15
    print("Discount 15 per cent", discount)
